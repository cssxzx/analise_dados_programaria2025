# -*- coding: utf-8 -*-
"""analise_dados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1covR4P9-VwtU0JYJmZd2Bt6UKbN55rc6

INTRODUÇÃO

# Uso da biblioteca pandas
"""

#Montando o drive
from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

#Lendo os dados
dados = pd.read_excel('/content/drive/MyDrive/PROGRAMARIA/planilha_modulo3.xlsx')

dados

dados.groupby('GENERO')['ID'].nunique()

dados.groupby('GENERO', dropna=False)['ID'].nunique()

dados['GENERO'].value_counts(dropna=False)

dados[dados['IDADE']>30]['NIVEL'].value_counts()

dados[(dados['IDADE']>30) & (dados['GENERO']=='Feminino')]['NIVEL'].value_counts()

pd.pivot_table(dados, values='ID', index=['GENERO'], columns=['GESTOR?'], aggfunc='count')

dados.head()

dados.tail()

dados.shape

len(dados)

dados.columns

dados.info()

dados.describe()

"""Repetindo análise do excel

"""

dados[dados['GENERO'] == 'Feminino']

dados[dados['GENERO'] != 'Masculino']

dados[dados['GENERO'].str.contains('não', na =False)]

dados[dados['IDADE']>30]

dados[(dados['IDADE']>30) & (dados['GENERO'] == 'Feminino')]

dados.columns

dados[dados['COR/RACA/ETNIA'] == 'Amarela']

dados[dados['IDADE'] < 40]

import pandas as pd

##from google.colab import drive
##drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/PROGRAMARIA/licitacoes.csv', encoding='latin1', sep=';')

df.head()

df.columns

df[df['Situação Licitação'] == 'Encerrado']

df['Situação Licitação'].value_counts()

df.info()

"""Trabalhando com a coluna Data Abertura

"""

df['Data Abertura'].isnull().value_counts()

# Preencher valores faltantes na coluna 'Data Abertura' com o mesmo formato das datas existentes
df['Data Abertura'] = df['Data Abertura'].fillna(method='ffill')
print(df['Data Abertura'])

df['Data Abertura'].isnull().value_counts()

"""#ESTATÍSTICA

"""

import numpy as np

lista_idades = [26,30,32,22,26,35,40,20,43,31,23]

np.sum(lista_idades)

len(lista_idades)

np.sum(lista_idades)/len(lista_idades)

media = np.mean(lista_idades)
print('Média Aritmética:',media)

#colocando os dados em ordem
lista_idades.sort()
lista_idades

mediana = np.median(lista_idades)
print('Mediana:',mediana)

"""####Voltando para tabela

"""

dados['IDADE'].mean()

dados['IDADE'].median()

dados['IDADE'].mode()

dados['IDADE'].std()

dados['IDADE'].min()

dados['IDADE'].max()

dados[dados['GENERO']=='Feminino']['IDADE'].mean()

dados[dados['GENERO']=='Feminino']['SALARIO'].mean()

dados[dados['GENERO']=='Masculino']['SALARIO'].mean()

"""#EstatísticaCheck

"""

dados[dados['GENERO']=='Masculino']['IDADE'].mean()

dados[dados['GENERO']=='Masculino']['IDADE'].min()

dados[dados['GENERO']=='Masculino']['SALARIO'].max()

dados[dados['GENERO']=='Feminino']['SALARIO'].max()

dados[dados['GENERO']=='Feminino']['SALARIO'].min()

dados[dados['GENERO']=='Masculino']['SALARIO'].min()

"""###VALORES FALTANTES


"""

dados.info()

"""### Trabalhando coluna de gênero"""

dados.groupby('GENERO', dropna='False')['ID'].nunique()

dados['GENERO'] = dados['GENERO'].fillna('Prefiro não informar')

dados.groupby('GENERO', dropna='False')['ID'].nunique()

"""### Trabalhando coluna de Idade"""

dados['IDADE'].isnull().value_counts()

dados.groupby('IDADE', dropna='False')['ID'].nunique()

dados[dados['IDADE'].isnull()]['FAIXA IDADE'].value_counts()

media_17_21 = dados[dados['FAIXA IDADE']=='17-21']['IDADE'].mean()

dados.loc[(dados['FAIXA IDADE']=='17-21') & (dados['IDADE'].isnull()), 'IDADE'] = media_17_21

dados[dados['IDADE'].isnull()]['FAIXA IDADE'].value_counts()

dados[dados['FAIXA IDADE']=='55+']['IDADE']

dados[dados['FAIXA IDADE']=='55+']['NIVEL']

media_geral = dados['IDADE'].mean()
media_geral

dados.loc[(dados['FAIXA IDADE']=='55+') & (dados['IDADE'].isnull()), 'IDADE'] = media_geral

dados[dados['IDADE'].isnull()]['FAIXA IDADE'].value_counts()

"""### Tratando coluna salário"""

dados[dados['SALARIO'].isnull()]['FAIXA SALARIAL'].value_counts()

mediana = dados['SALARIO'].median()

dados.loc[dados['SALARIO'].isnull(), 'SALARIO'] = mediana

"""### Tratando valores discrepantes (outliers)

"""

import numpy as np

lista_idades = [26,30,32,22,26,35,400,20,43,31,23]

media = np.mean(lista_idades)
media

desvio = np.std(lista_idades)
desvio

media + 3*desvio  #LS acima disso tem-se outliers

media - 3*desvio

import matplotlib.pyplot as plt

plt.boxplot(lista_idades)

plt.boxplot(dados['SALARIO'])

Q1 = dados['SALARIO'].quantile(0.25)
Q1

Q3 = dados['SALARIO'].quantile(0.75)
Q3

IQR = Q3 - Q1
IQR

limite_superior = Q3 + (1.5*IQR)
limite_superior

limite_inferior = Q1 - (1.5*IQR)
limite_inferior

media_salario = dados['SALARIO'].mean()
media_salario

desvio_salario = dados['SALARIO'].std()
desvio_salario

limite_superior_salario = media_salario + (3*desvio_salario)
limite_superior_salario

limite_inferior_salario = media_salario - (3*desvio_salario)
limite_inferior_salario

dados[(dados['SALARIO'] > limite_superior_salario)]['FAIXA SALARIAL'].value_counts()

media_30_40 = dados[(dados['FAIXA SALARIAL'] =='de R$ 30.001/mês a R$ 40.000/mês') & (dados['SALARIO']
                                                                    < limite_superior_salario)]['SALARIO'].mean()
media_30_40

dados.loc[(dados['FAIXA SALARIAL']=='de R$ 30.001/mês a R$ 40.000/mês') & (dados['SALARIO'] > limite_superior_salario), 'SALARIO'] = media_30_40

dados[(dados['SALARIO'] > limite_superior_salario)]['FAIXA SALARIAL'].value_counts()

media_40 = dados[(dados['FAIXA SALARIAL'] =='Acima de R$ 40.001/mês') & (dados['SALARIO']
                                                                    < limite_superior_salario)]['SALARIO'].mean()
media_40

dados.loc[(dados['FAIXA SALARIAL']=='Acima de R$ 40.001/mês') & (dados['SALARIO']
                                                                    > limite_superior_salario), 'SALARIO'] = media_40

dados[(dados['SALARIO'] > limite_superior_salario)]['FAIXA SALARIAL'].value_counts()

plt.boxplot(dados['SALARIO'])

salarios = dados['SALARIO']
salarios

media_amostral = np.mean(salarios)
media_amostral

desvio_amostral = np.std(salarios)
desvio_amostral

nivel_confianca = 0.95

tamanho_amostra = len(salarios)
tamanho_amostra

from scipy import stats

erro_padrao = stats.sem(salarios)
erro_padrao

intervalo_confianca = stats.t.interval(nivel_confianca, tamanho_amostra-1, loc=media_amostral, scale=erro_padrao)
intervalo_confianca

"""###Descobrindo valor do intervalo c 90% de confiança"""

idades = dados['IDADE']
idades

media_amostral_idade = np.mean(idades)
media_amostral_idade

desvio_amostral_idade = np.std(idades)
desvio_amostral_idade

nivel_confianca_idade = 0.90

tamanho_amostral_idades = len(idades)
tamanho_amostral_idades

erro_padrao_idades = stats.sem(idades)
erro_padrao_idades

# prompt: intervalo de confianca 90% de idades

intervalo_confianca_idades = stats.t.interval(nivel_confianca_idade, tamanho_amostral_idades-1, loc=media_amostral_idade, scale=erro_padrao_idades)
intervalo_confianca_idades

""" ### Feature Engineering"""

def preencher_nivel(gestor,nivel):
  if gestor== 1:
     return 'Pessoa Gestora'
  else:
    return nivel

dados['NOVO NIVEL'] = dados.apply(lambda x: preencher_nivel(x['GESTOR?'], x['NIVEL']), axis=1)

dados['NOVO NIVEL']

dados['NOVO NIVEL'].value_counts()

dados['NIVEL']

##separa os níveis e cria novas colunas
dados = pd.get_dummies(dados, columns=['NIVEL'])

dados.columns

def determinar_geracao(idade):
  if 39<idade<=58:
     return 'Geração X'
  elif 29<idade<=39:
     return 'Millenial'
  elif 13<idade<=29:
     return 'Geração Z'
  else:
     return 'Outra geração'

dados['GERACAO'] = dados['IDADE'].apply(determinar_geracao)

dados['GERACAO'].value_counts()

dados2 = pd.read_excel('/content/drive/MyDrive/PROGRAMARIA/Planilha_Aula_parte2.xlsx')

dados2

dados = dados.merge(dados2, on='ID', how='left')

dados.columns

dados['Você pretende mudar de emprego nos próximos 6 meses?'].value_counts()

dados['EM_BUSCA'] = dados['Você pretende mudar de emprego nos próximos 6 meses?'].str.contains('em busca', case=False)

dados['EM_BUSCA'] .value_counts()

dados['ABERTO_OPORTUNIDADES'] = dados['Você pretende mudar de emprego nos próximos 6 meses?'].str.contains('aberto', case=False)

dados['ABERTO_OPORTUNIDADES'].value_counts()

"""### Desafio: crie uma nova coluna de Etnia - brancas, não branca e outras

"""

def definir_etnia(etnia):
  if etnia == 'Branca':
    return 'Branca'
  elif etnia in ['Preta', 'Parda', 'Indígena']:
    return 'Não Branca'
  else:
    return 'Outras'

dados['ETNIA_NOVA'] = dados['COR/RACA/ETNIA'].apply(definir_etnia)

dados['ETNIA_NOVA'].value_counts()

"""###Correlação"""

from scipy.stats import chi2_contingency

def cramer_coeficiente(coluna1, coluna2):
  tabela_cruzada = np.array(pd.crosstab(coluna1, coluna2))
  chi2 = stats.chi2_contingency(tabela_cruzada)[0]
  soma = np.sum(tabela_cruzada)
  mini = min(tabela_cruzada.shape)-1
  cramer = np.sqrt(chi2/(soma*mini))
  return cramer

tabela_cruzada = pd.crosstab(dados['COR/RACA/ETNIA'], dados['NIVEL DE ENSINO'])
tabela_cruzada

dados.columns

cramer_coeficiente(dados['COR/RACA/ETNIA'], dados['NIVEL DE ENSINO'])

correlacao_continua = dados['IDADE'].corr(dados['SALARIO'])
correlacao_continua

"""###Desafio: Faça a correlação entre nível de ensino e gênero"""

tabela_cruzada2 = pd.crosstab(dados['NIVEL DE ENSINO'], dados['GENERO'])
tabela_cruzada2

cramer_coeficiente(dados['GENERO'], dados['NIVEL DE ENSINO'])

dados.to_csv('/content/drive/MyDrive/PROGRAMARIA/analise_dados.csv', index = False)

"""### Conectando SQL com Pandas"""

import sqlite3

import pandas as pd

conexao = sqlite3.connect('/content/drive/MyDrive/PROGRAMARIA/status_brasil')

query = "SELECT * FROM Municipios_Brasileiros WHERE Cidade='Itaquaquecetuba';"

query

pd.read_sql(query, con=conexao)

dados = pd.read_csv('/content/drive/MyDrive/PROGRAMARIA/analise_dados.csv')

dados.columns

lista_estados = list(dados['UF ONDE MORA'].unique())

query = """SELECT Municipios_Brasileiros.Estado, AVG(Municipios_Status.renda) FROM Municipios_Brasileiros
        INNER JOIN Municipios_Status ON Municipios_Brasileiros.municipio_ID = Municipios_Status.municipio_ID
         WHERE Municipios_Brasileiros.Estado IN ({})
        GROUP BY Municipios_Brasileiros.Estado;""".format(','.join(['?' for _ in lista_estados]))

print(query)

estados_renda = pd.read_sql(query, con=conexao, params=(lista_estados))

dados.rename(columns={'UF ONDE MORA':'Estado'}, inplace=True)

dados.columns

dados = dados.merge(estados_renda, on='Estado', how='left')

dados.columns

correlacao_renda_salario = dados['SALARIO'].corr(dados['AVG(Municipios_Status.renda)'])
correlacao_renda_salario

query = """SELECT Municipios_Brasileiros.Estado, AVG(Municipios_Status.educacao) FROM Municipios_Brasileiros
        INNER JOIN Municipios_Status ON Municipios_Brasileiros.municipio_ID = Municipios_Status.municipio_ID
         WHERE Municipios_Brasileiros.Estado IN ({})
        GROUP BY Municipios_Brasileiros.Estado;""".format(','.join(['?' for _ in lista_estados]))

educacao_estado = pd.read_sql(query, con=conexao, params=(lista_estados))
educacao_estado

dados = dados.merge(educacao_estado, on='Estado', how='left')

dados.columns

correlacao_salario_educacao = dados['SALARIO'].corr(dados['AVG(Municipios_Status.educacao)_y'])
correlacao_salario_educacao

"""### Visualização de Dados"""

import pandas as pd

dados = pd.read_csv('/content/drive/MyDrive/PROGRAMARIA/analise_dados.csv')

dados

genero_counts = dados['GENERO'].value_counts()

import matplotlib.pyplot as plt

plt.figure()
plt.bar(height = genero_counts.values, x = genero_counts.index)
plt.title('Quantidade de pessoas por gênero na área de dados')
plt.xlabel('Gênero')
plt.ylabel('Quantidade')
plt.show()

import seaborn as sns

plt.figure()
sns.countplot(data=dados, x='GENERO', palette= 'pastel')
plt.title('Quantidade de pessoas por gênero na área de dados')
plt.xlabel('Gênero')
plt.ylabel('Quantidade')
plt.grid(True)
plt.show()

salario_por_idade = dados.groupby('IDADE')['SALARIO'].mean()
salario_por_idade

plt.figure()
plt.plot(salario_por_idade.index, salario_por_idade.values, marker = 'o', linestyle= '--')
plt.xlabel('Idade')
plt.ylabel('Média de Salário')
plt.title('Média de Salário por Idade')
plt.grid(True)
plt.show()

import plotly.express as px

fig = px.line(salario_por_idade.reset_index(), x='IDADE', y='SALARIO', title='Média de Salário por Idade', markers=True)
fig.show()
fig

plt.figure(figsize=(15,5))
plt.scatter(dados['IDADE'], dados['SALARIO'], alpha= 0.5)
plt.xlabel('Idade')
plt.ylabel('Salário')
plt.title('Dispersão de salario por idade')
plt.grid(True)
plt.show()

fig = px.scatter(dados, x='IDADE', y='SALARIO', title='Dispersão de salario por idade')
fig.show()